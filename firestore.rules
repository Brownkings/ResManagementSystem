rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isManager() {
      return hasRole('Manager') || hasRole('manager');
    }
    
    function isChef() {
      return hasRole('Chef') || hasRole('chef');
    }
    
    function isWaiter() {
      return hasRole('Waiter') || hasRole('waiter');
    }
    
    match /users/{userId} {
      // Allow any authenticated user to read any user document
      // This is important for role-based access control to work properly
      allow read: if isAuthenticated();
      
      allow update: if (isOwner(userId) && 
                      !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role'])) ||
                      isManager();
      
      allow create, delete: if isManager();
    }
    
    match /menu/{itemId} {
      allow read: if isAuthenticated();
      
      allow create, update, delete: if isManager();
    }
    
    match /orders/{orderId} {
      allow read: if isAuthenticated() && (
                    resource.data.customerId == request.auth.uid || 
                    isWaiter() ||
                    isChef() ||
                    isManager()
                  );
      
      allow create: if isAuthenticated() && 
                     request.resource.data.customerId == request.auth.uid;
      
      allow update: if isAuthenticated() && (
                     isWaiter() ||
                     isManager() ||
                     (isChef() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']))
                   );
      
      allow delete: if isManager();
    }
    
    match /inventory/{itemId} {
      allow read: if isAuthenticated() && (
                    isChef() ||
                    isManager()
                  );
      
      allow create, update, delete: if isManager();
    }
    
    match /reservations/{reservationId} {
      allow read: if isAuthenticated() && (
                    resource.data.customerId == request.auth.uid || 
                    isWaiter() ||
                    isChef() ||
                    isManager()
                  );
      
      allow create: if isAuthenticated() && 
                     request.resource.data.customerId == request.auth.uid;
      
      allow update: if isAuthenticated() && (
                     isWaiter() ||
                     isManager()
                   );
      
      allow delete: if isManager();
    }
    
    match /tables/{tableId} {
      allow read: if isAuthenticated();
      
      allow create, update: if isAuthenticated() && (
                            isWaiter() ||
                            isManager()
                          );
      
      allow delete: if isManager();
    }
  }
}